// Code generated by MockGen. DO NOT EDIT.
// Source: database/data.go
//
// Generated by this command:
//
//	mockgen -source=database/data.go -destination=database/mocks/mock.go
//
// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"
	database "subscriptionbot/database"

	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockSubscriptionRepository) DeleteOne(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteOne(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteOne), ctx, id)
}

// Disconnect mocks base method.
func (m *MockSubscriptionRepository) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockSubscriptionRepositoryMockRecorder) Disconnect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockSubscriptionRepository)(nil).Disconnect), ctx)
}

// Find mocks base method.
func (m *MockSubscriptionRepository) Find(ctx context.Context, filter bson.D) ([]*database.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filter)
	ret0, _ := ret[0].([]*database.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSubscriptionRepositoryMockRecorder) Find(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSubscriptionRepository)(nil).Find), ctx, filter)
}

// FindSubscriptionByChatID mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptionByChatID(ctx context.Context, chatID int64) (*database.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptionByChatID", ctx, chatID)
	ret0, _ := ret[0].(*database.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptionByChatID indicates an expected call of FindSubscriptionByChatID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptionByChatID(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptionByChatID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptionByChatID), ctx, chatID)
}

// InsertOne mocks base method.
func (m *MockSubscriptionRepository) InsertOne(ctx context.Context, subscription *database.Subscription) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, subscription)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockSubscriptionRepositoryMockRecorder) InsertOne(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockSubscriptionRepository)(nil).InsertOne), ctx, subscription)
}

// UpdateByID mocks base method.
func (m *MockSubscriptionRepository) UpdateByID(ctx context.Context, id primitive.ObjectID, upd *database.Subscription) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, upd)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockSubscriptionRepositoryMockRecorder) UpdateByID(ctx, id, upd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockSubscriptionRepository)(nil).UpdateByID), ctx, id, upd)
}

// UpsertOne mocks base method.
func (m *MockSubscriptionRepository) UpsertOne(ctx context.Context, subscription *database.Subscription) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOne", ctx, subscription)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertOne indicates an expected call of UpsertOne.
func (mr *MockSubscriptionRepositoryMockRecorder) UpsertOne(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOne", reflect.TypeOf((*MockSubscriptionRepository)(nil).UpsertOne), ctx, subscription)
}
